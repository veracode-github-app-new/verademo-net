{"_embedded": {"findings": [
  {
    "issue_id": 1,
    "scan_type": "STATIC",
    "description": "<span>This call to system_diagnostics_process_dll.System.Diagnostics.Process.Start() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. Start() was called on an object, which contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.ToolsController.Tools.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 5,
      "cwe": {
        "id": 78,
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/78"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/controllers/toolscontroller.cs",
      "file_name": "toolscontroller.cs",
      "module": "app.dll",
      "relative_location": 63,
      "finding_category": {
        "id": 18,
        "name": "Command or Argument Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/18"
      },
      "procedure": "app_dll.Verademo.Controllers.ToolsController.Ping",
      "exploitability": 0,
      "attack_vector": "system_diagnostics_process_dll.System.Diagnostics.Process.Start",
      "file_line_number": 68
    },
    "build_id": 41453344
  },
  {
    "issue_id": 2,
    "scan_type": "STATIC",
    "description": "<span>This call to system_diagnostics_process_dll.System.Diagnostics.Process.Start() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. Start() was called on an object, which contains tainted data. The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.ToolsController.Tools.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 5,
      "cwe": {
        "id": 78,
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/78"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/controllers/toolscontroller.cs",
      "file_name": "toolscontroller.cs",
      "module": "app.dll",
      "relative_location": 59,
      "finding_category": {
        "id": 18,
        "name": "Command or Argument Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/18"
      },
      "procedure": "app_dll.Verademo.Controllers.ToolsController.Fortune",
      "exploitability": 0,
      "attack_vector": "system_diagnostics_process_dll.System.Diagnostics.Process.Start",
      "file_line_number": 102
    },
    "build_id": 41453344
  },
  {
    "issue_id": 3,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on an object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/controllers/blabcontroller.cs",
      "file_name": "blabcontroller.cs",
      "module": "app.dll",
      "relative_location": 47,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Controllers.BlabController.PostSearchBlabs",
      "exploitability": 0,
      "attack_vector": "system_data_common_dll.System.Data.IDbCommand.ExecuteReader",
      "file_line_number": 97
    },
    "build_id": 41453344
  },
  {
    "issue_id": 4,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on an object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/controllers/blabcontroller.cs",
      "file_name": "blabcontroller.cs",
      "module": "app.dll",
      "relative_location": 38,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Controllers.BlabController.PopulateBlabbersViewModel",
      "exploitability": 0,
      "attack_vector": "system_data_common_dll.System.Data.IDbCommand.ExecuteReader",
      "file_line_number": 261
    },
    "build_id": 41453344
  },
  {
    "issue_id": 5,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to entityframework_dll.System.Data.Entity.Database.SqlQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to SqlQuery() contains tainted data from the variable Concat(). </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/controllers/authcontrollerbase.cs",
      "file_name": "authcontrollerbase.cs",
      "module": "app.dll",
      "relative_location": 28,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Controllers.AuthControllerBase.LoginUser",
      "exploitability": 0,
      "attack_vector": "entityframework_dll.System.Data.Entity.Database.SqlQuery",
      "file_line_number": 24
    },
    "build_id": 41453344
  },
  {
    "issue_id": 6,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on an object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/controllers/accountcontroller.cs",
      "file_name": "accountcontroller.cs",
      "module": "app.dll",
      "relative_location": 32,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Controllers.AccountController.PopulateProfileViewModel",
      "exploitability": 0,
      "attack_vector": "system_data_common_dll.System.Data.IDbCommand.ExecuteReader",
      "file_line_number": 365
    },
    "build_id": 41453344
  },
  {
    "issue_id": 7,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on an object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/controllers/accountcontroller.cs",
      "file_name": "accountcontroller.cs",
      "module": "app.dll",
      "relative_location": 53,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Controllers.AccountController.RetrieveMyEvents",
      "exploitability": 0,
      "attack_vector": "system_data_common_dll.System.Data.IDbCommand.ExecuteReader",
      "file_line_number": 456
    },
    "build_id": 41453344
  },
  {
    "issue_id": 8,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteScalar() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteScalar() was called on an object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/commands/removeaccountcommand.cs",
      "file_name": "removeaccountcommand.cs",
      "module": "app.dll",
      "relative_location": 48,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Commands.RemoveAccountCommand.Execute",
      "exploitability": 0,
      "attack_vector": "system_data_common_dll.System.Data.IDbCommand.ExecuteScalar",
      "file_line_number": 31
    },
    "build_id": 41453344
  },
  {
    "issue_id": 9,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on an object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/commands/removeaccountcommand.cs",
      "file_name": "removeaccountcommand.cs",
      "module": "app.dll",
      "relative_location": 82,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Commands.RemoveAccountCommand.Execute",
      "exploitability": 0,
      "attack_vector": "system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery",
      "file_line_number": 38
    },
    "build_id": 41453344
  },
  {
    "issue_id": 10,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on an object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/commands/removeaccountcommand.cs",
      "file_name": "removeaccountcommand.cs",
      "module": "app.dll",
      "relative_location": 97,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Commands.RemoveAccountCommand.Execute",
      "exploitability": 0,
      "attack_vector": "system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery",
      "file_line_number": 43
    },
    "build_id": 41453344
  },
  {
    "issue_id": 11,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on an object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/commands/listencommand.cs",
      "file_name": "listencommand.cs",
      "module": "app.dll",
      "relative_location": 95,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Commands.ListenCommand.Execute",
      "exploitability": 0,
      "attack_vector": "system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery",
      "file_line_number": 54
    },
    "build_id": 41453344
  },
  {
    "issue_id": 12,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteScalar() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteScalar() was called on an object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/commands/ignorecommand.cs",
      "file_name": "ignorecommand.cs",
      "module": "app.dll",
      "relative_location": 54,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Commands.IgnoreCommand.Execute",
      "exploitability": 0,
      "attack_vector": "system_data_common_dll.System.Data.IDbCommand.ExecuteScalar",
      "file_line_number": 33
    },
    "build_id": 41453344
  },
  {
    "issue_id": 13,
    "scan_type": "STATIC",
    "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on an object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 4,
      "cwe": {
        "id": 89,
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "href": "https://api.veracode.com/appsec/v1/cwes/89"
      },
      "file_path": "home/runner/work/verademo-net/verademo-net/app/commands/ignorecommand.cs",
      "file_name": "ignorecommand.cs",
      "module": "app.dll",
      "relative_location": 97,
      "finding_category": {
        "id": 19,
        "name": "SQL Injection",
        "href": "https://api.veracode.com/appsec/v1/categories/19"
      },
      "procedure": "app_dll.Verademo.Commands.IgnoreCommand.Execute",
      "exploitability": 0,
      "attack_vector": "system_data_common_dll.System.Data.IDbCommand.ExecuteNonQuery",
      "file_line_number": 44
    },
    "build_id": 41453344
  },
  {
    "issue_id": 14,
    "scan_type": "STATIC",
    "description": "<span>This call to microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Html().Raw(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.ToolsController.Tools.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 3,
      "cwe": {
        "id": 80,
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "href": "https://api.veracode.com/appsec/v1/cwes/80"
      },
      "module": "app.dll",
      "relative_location": 10,
      "finding_category": {
        "id": 20,
        "name": "Cross-Site Scripting (XSS)",
        "href": "https://api.veracode.com/appsec/v1/categories/20"
      },
      "procedure": "app_dll.AspNetCoreGeneratedDocument.Views_Tools_Tools._3C_3CExecuteAsync_3Eb__12_0_3Ed.MoveNext",
      "exploitability": 0,
      "attack_vector": "microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write",
      "file_line_number": 1
    },
    "build_id": 41453344
  },
  {
    "issue_id": 15,
    "scan_type": "STATIC",
    "description": "<span>This call to microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Raw() contains tainted data from the variable Concat(). The tainted data originated from earlier calls to app_dll.VirtualController.vc_mvcentry, and app_dll.Verademo.Controllers.ToolsController.Tools.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 3,
      "cwe": {
        "id": 80,
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "href": "https://api.veracode.com/appsec/v1/cwes/80"
      },
      "module": "app.dll",
      "relative_location": 10,
      "finding_category": {
        "id": 20,
        "name": "Cross-Site Scripting (XSS)",
        "href": "https://api.veracode.com/appsec/v1/categories/20"
      },
      "procedure": "app_dll.AspNetCoreGeneratedDocument.Views_Tools_Tools._3C_3CExecuteAsync_3Eb__12_0_3Ed.MoveNext",
      "exploitability": 0,
      "attack_vector": "microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw",
      "file_line_number": 1
    },
    "build_id": 41453344
  },
  {
    "issue_id": 16,
    "scan_type": "STATIC",
    "description": "<span>This call to microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Html().Raw(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 3,
      "cwe": {
        "id": 80,
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "href": "https://api.veracode.com/appsec/v1/cwes/80"
      },
      "module": "app.dll",
      "relative_location": 43,
      "finding_category": {
        "id": 20,
        "name": "Cross-Site Scripting (XSS)",
        "href": "https://api.veracode.com/appsec/v1/categories/20"
      },
      "procedure": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13.MoveNext",
      "exploitability": 0,
      "attack_vector": "microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write",
      "file_line_number": 51
    },
    "build_id": 41453344
  },
  {
    "issue_id": 17,
    "scan_type": "STATIC",
    "description": "<span>This call to microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Raw() contains tainted data from the variable \\<post\\>5__3.get_Content(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 3,
      "cwe": {
        "id": 80,
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "href": "https://api.veracode.com/appsec/v1/cwes/80"
      },
      "module": "app.dll",
      "relative_location": 43,
      "finding_category": {
        "id": 20,
        "name": "Cross-Site Scripting (XSS)",
        "href": "https://api.veracode.com/appsec/v1/categories/20"
      },
      "procedure": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13.MoveNext",
      "exploitability": 0,
      "attack_vector": "microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw",
      "file_line_number": 51
    },
    "build_id": 41453344
  },
  {
    "issue_id": 18,
    "scan_type": "STATIC",
    "description": "<span>This call to microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Html().Raw(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 3,
      "cwe": {
        "id": 80,
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "href": "https://api.veracode.com/appsec/v1/cwes/80"
      },
      "module": "app.dll",
      "relative_location": 86,
      "finding_category": {
        "id": 20,
        "name": "Cross-Site Scripting (XSS)",
        "href": "https://api.veracode.com/appsec/v1/categories/20"
      },
      "procedure": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Blab._3CExecuteAsync_3Ed__13.MoveNext",
      "exploitability": 0,
      "attack_vector": "microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write",
      "file_line_number": 65
    },
    "build_id": 41453344
  },
  {
    "issue_id": 19,
    "scan_type": "STATIC",
    "description": "<span>This call to microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Raw() contains tainted data from the variable \\<comment\\>5__3.get_Content(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 3,
      "cwe": {
        "id": 80,
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "href": "https://api.veracode.com/appsec/v1/cwes/80"
      },
      "module": "app.dll",
      "relative_location": 86,
      "finding_category": {
        "id": 20,
        "name": "Cross-Site Scripting (XSS)",
        "href": "https://api.veracode.com/appsec/v1/categories/20"
      },
      "procedure": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Blab._3CExecuteAsync_3Ed__13.MoveNext",
      "exploitability": 0,
      "attack_vector": "microsoft_aspnetcore_mvc_viewfeatures_dll.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw",
      "file_line_number": 65
    },
    "build_id": 41453344
  },
  {
    "issue_id": 20,
    "scan_type": "STATIC",
    "description": "<span>This call to microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Html().Raw(). The tainted data originated from an earlier call to system_data_common_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>",
    "count": 1,
    "context_type": "APPLICATION",
    "context_guid": "80aa2534-ba3d-4996-b960-5b6d7d9df2dd",
    "violates_policy": true,
    "finding_status": {
      "first_found_date": "2024-09-23T01:25:24.401Z",
      "status": "OPEN",
      "resolution": "UNRESOLVED",
      "mitigation_review_status": "NONE",
      "new": false,
      "resolution_status": "NONE",
      "last_seen_date": "2024-09-24T06:37:53.886Z"
    },
    "finding_details": {
      "severity": 3,
      "cwe": {
        "id": 80,
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "href": "https://api.veracode.com/appsec/v1/cwes/80"
      },
      "module": "app.dll",
      "relative_location": 85,
      "finding_category": {
        "id": 20,
        "name": "Cross-Site Scripting (XSS)",
        "href": "https://api.veracode.com/appsec/v1/categories/20"
      },
      "procedure": "app_dll.AspNetCoreGeneratedDocument.Views_Blab_Feed._3CExecuteAsync_3Ed__13.MoveNext",
      "exploitability": 0,
      "attack_vector": "microsoft_aspnetcore_mvc_razor_dll.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write",
      "file_line_number": 1
    },
    "build_id": 41453344
  }
]}, "_links": {
  "first": {
    "href": "https://api.veracode.com/appsec/v2/applications/80aa2534-ba3d-4996-b960-5b6d7d9df2dd/findings?violates_policy=true&page=0&size=20"
  },
  "self": {
    "href": "https://api.veracode.com/appsec/v2/applications/80aa2534-ba3d-4996-b960-5b6d7d9df2dd/findings?violates_policy=true{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,include_annot,new,include_exp_date,mitigated_after,sca_scan_mode,sca_dep_mode,scan_type}",
    "templated": true
  },
  "next": {
    "href": "https://api.veracode.com/appsec/v2/applications/80aa2534-ba3d-4996-b960-5b6d7d9df2dd/findings?violates_policy=true&page=1&size=20"
  },
  "last": {
    "href": "https://api.veracode.com/appsec/v2/applications/80aa2534-ba3d-4996-b960-5b6d7d9df2dd/findings?violates_policy=true&page=3&size=20"
  },
  "application": {
    "href": "https://api.veracode.com/appsec/v1/applications/80aa2534-ba3d-4996-b960-5b6d7d9df2dd"
  },
  "sca": {
    "href": "https://api.veracode.com/appsec/v2/applications/80aa2534-ba3d-4996-b960-5b6d7d9df2dd/findings?violates_policy=true&scan_type=SCA{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,include_annot,new,include_exp_date,mitigated_after,sca_scan_mode,sca_dep_mode}",
    "templated": true
  }
}, "page": {
  "size": 20,
  "total_elements": 62,
  "total_pages": 4,
  "number": 0
}}